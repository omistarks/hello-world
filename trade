Creating an AI-based index option trading bot using the SmartAPI (Angel One) requires several key components:

	1.	API Integration: Connecting with Angel One’s SmartAPI for real-time data and order placement.
	2.	Strategy Logic: A trading strategy (based on AI/ML or rule-based) that decides when to buy and sell options.
	3.	Risk Management: Incorporating a risk-to-reward ratio (in this case 1:4).
	4.	Execution: Placing trades using the SmartAPI.
	5.	Monitoring: Continuously monitoring trades and adjusting accordingly.

Below is a Python script framework that shows how you could set up such a bot using Angel One’s SmartAPI. This includes placeholders for strategy logic and 1:4 risk/reward management.

Steps:

	1.	Install required libraries:

pip install smartapi-python
pip install numpy pandas


	2.	Bot Implementation:

import time
import pandas as pd
import numpy as np
from smartapi import SmartConnect

# --- API Credentials ---
api_key = "your_api_key"
client_id = "your_client_id"
password = "your_password"
totp = "your_totp"  # Time-based one-time password (if required)

# --- Initialize Smart API Connection ---
smart_api = SmartConnect(api_key=api_key)
login_data = smart_api.generateSession(client_id, password, totp)

# --- Function to fetch option chain or current price of the index ---
def get_ltp(symbol):
    try:
        ltp_data = smart_api.ltpData('NSE', symbol)
        return ltp_data['data']['ltp']
    except Exception as e:
        print(f"Error fetching LTP: {e}")
        return None

# --- Define Risk Management Variables ---
RISK_REWARD_RATIO = 1 / 4  # 1:4 profit ratio
STOP_LOSS_PERCENT = 0.02  # 2% stop loss
TARGET_PERCENT = STOP_LOSS_PERCENT * RISK_REWARD_RATIO

# --- Sample Option Trading Strategy ---
def ai_trading_strategy():
    # Here you can implement AI/ML models or technical analysis (TA) for signals.
    # For now, this is a simple placeholder:
    
    # Simulated decision based on a dummy condition
    signal = np.random.choice(['BUY', 'SELL', 'HOLD'], p=[0.3, 0.3, 0.4])  # Random signals for demonstration
    
    if signal == 'BUY':
        # Buy call option logic (based on AI)
        return {'action': 'BUY', 'symbol': 'NIFTY23OCT18700CE'}
    
    elif signal == 'SELL':
        # Buy put option logic (based on AI)
        return {'action': 'SELL', 'symbol': 'NIFTY23OCT18700PE'}
    
    else:
        return {'action': 'HOLD'}

# --- Function to place orders ---
def place_order(symbol, transaction_type, quantity):
    try:
        order_params = {
            "variety": "NORMAL",  # Normal order
            "tradingsymbol": symbol,
            "symboltoken": "your_token",
            "transactiontype": transaction_type,
            "exchange": "NSE",
            "ordertype": "LIMIT",  # Limit order for entry
            "producttype": "INTRADAY",
            "duration": "DAY",
            "price": get_ltp(symbol),
            "quantity": quantity,
        }
        order_id = smart_api.placeOrder(order_params)
        print(f"Order placed successfully, Order ID: {order_id}")
        return order_id
    except Exception as e:
        print(f"Error placing order: {e}")
        return None

# --- Monitor Orders for Stop Loss and Target ---
def monitor_order(symbol, entry_price, stop_loss, target):
    while True:
        current_price = get_ltp(symbol)
        if current_price is None:
            continue

        # Check stop loss
        if current_price <= stop_loss:
            print(f"Stop Loss hit at {current_price}")
            return 'STOPPED'
        
        # Check target
        if current_price >= target:
            print(f"Target hit at {current_price}")
            return 'TARGET'

        # Pause before checking again
        time.sleep(5)

# --- Main Trading Loop ---
def trading_bot():
    # Fetch trading signals
    signal_data = ai_trading_strategy()

    # If action is 'BUY' or 'SELL', execute trade
    if signal_data['action'] in ['BUY', 'SELL']:
        symbol = signal_data['symbol']
        action = signal_data['action']
        quantity = 25  # Adjust based on your capital

        # Place order
        entry_price = get_ltp(symbol)
        order_id = place_order(symbol, action, quantity)

        if order_id:
            # Calculate stop loss and target prices
            stop_loss = entry_price * (1 - STOP_LOSS_PERCENT)
            target = entry_price * (1 + TARGET_PERCENT)

            print(f"Entry Price: {entry_price}, Stop Loss: {stop_loss}, Target: {target}")

            # Monitor the trade for stop loss or target
            result = monitor_order(symbol, entry_price, stop_loss, target)
            print(f"Order Result: {result}")

# --- Start Bot ---
if __name__ == "__main__":
    while True:
        trading_bot()
        time.sleep(60)  # Wait for 1 minute before checking for new signals

Key Components:

	•	API Connection: This uses the SmartConnect class from Angel One’s SmartAPI to log in and place orders.
	•	AI Trading Strategy: The ai_trading_strategy() function is a placeholder. You can plug in AI/ML logic to predict market direction.
	•	Risk Management: A simple 1:4 profit-to-loss ratio is implemented using the STOP_LOSS_PERCENT and TARGET_PERCENT variables.
	•	Order Placement: The place_order() function sends orders to Angel One’s servers.
	•	Monitoring: After placing the trade, the bot continuously monitors price to exit at stop loss or target.

Considerations:

	1.	Live Testing: Make sure to backtest thoroughly before deploying live.
	2.	Regulatory Compliance: Ensure you comply with all local regulations around algorithmic trading.
	3.	AI Model: If you’re building an AI model, use libraries like TensorFlow or sklearn to integrate predictive logic.

Let me know if you need more help with the AI part!
